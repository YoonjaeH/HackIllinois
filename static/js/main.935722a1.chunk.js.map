{"version":3,"sources":["const.js","App.js","reportWebVitals.js","index.js"],"names":["GeoCenter","useStyles","makeStyles","theme","root","position","overflow","height","backgroundColor","slider","marginLeft","pred_rad_and_hue","p","r","g_comp","Math","abs","floor","toString","r_comp","length","slice","convertToKey","input","Date","toLocaleDateString","split","month","date","year","nextDay","value","temp","setDate","getDate","GoogleApiWrapper","apiKey","google","useState","mapArray","setMapArray","listArray","setListArray","actualkeys","Object","keys","actualdata","predictkeys","predictdata","classes","actualStartDate","predictStartDate","useEffect","document","body","style","className","id","zoom","containerStyle","left","right","top","width","initialCenter","lat","lng","Slider","defaultValue","valueLabelFormat","aria-labelledby","valueLabelDisplay","step","marks","onChange","event","newValue","actualObj","predictObj","console","log","circleResult","map","index","array","radHue","lati","longi","radius","center","strokeColor","strokeOpacity","strokeWeight","onClick","onMouseover","props","fillColor","fillOpacity","listResult","min","max","marginBottom","fontSize","List","state","prediction","actual","rad","hue","ListItem","ListItemText","primary","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.935722a1.chunk.js","sourcesContent":["// State -> [latitude, longitude]\n\nconst GeoCenter = {\n    \"Alabama\" :             [32.78, 86.83],\n    \"Alaska\" :              [64.07, 152.28],\n    \"Arizona\" :             [34.27, 111.66],\n    \"Arkansas\" :            [34.89, 92.44],\n    \"California\" :          [37.18, 119.47],\n    \"Colorado\" :            [39.00, 105.55],\n    \"Connecticut\" :         [41.62, 72.73],\n    \"Delaware\" :            [38.99, 75.51],\n    \"Distric of Columbia\" : [38.91, 77.01],\n    \"Florida\" :             [28.63, 82.45],\n    \"Georgia\" :             [32.64, 83.44],\n    \"Hawaii\" :              [20.29, 156.37],\n    \"Idaho\" :               [44.35, 114.61],\n    \"Illinois\" :            [40.04, 89.20],\n    \"Indiana\":              [39.89, 86.28],\n    \"Iowa\" :                [42.08, 93.50],\n    \"Kansas\" :              [38.49, 98.38],\n    \"Kentucky\" :            [37.53, 85.30],\n    \"Louisiana\" :           [31.07, 92.00],\n    \"Maine\" :               [45.37, 69.24],\n    \"Maryland\" :            [39.06, 76.79],\n    \"Massachusetts\" :       [42.26, 71.80],\n    \"Michigan\" :            [44.35, 85.41],\n    \"Minnesota\" :           [46.28, 94.31],\n    \"Mississippi\" :         [32.74, 89.67],\n    \"Missouri\" :            [38.36, 92.46],\n    \"Montana\" :             [47.05, 109.63],\n    \"Nebraska\" :            [41.54, 99.80],\n    \"Nevada\" :              [39.33, 116.63],\n    \"New Hampshire\" :       [43.68, 71.58],\n    \"New Jersey\" :          [40.19, 74.67],\n    \"New Mexico\" :          [34.41, 106.11],\n    \"New York\" :            [42.95, 75.53],\n    \"North Carolina\" :      [35.56, 79.39],\n    \"North Dakota\" :        [47.45, 100.47],\n    \"Ohio\" :                [40.29, 82.79],\n    \"Oklahoma\" :            [35.59, 97.49],\n    \"Oregon\" :              [43.93, 120.56],\n    \"Pennsylvania\" :        [40.88, 77.80],\n    \"Rhode Island\" :        [41.68, 71.56],\n    \"South Carolina\" :      [33.92, 80.90],\n    \"South Dakota\" :        [44.44, 100.27],\n    \"Tennessee\" :           [35.86, 86.35],\n    \"Texas\" :               [31.48, 99.33],\n    \"Utah\" :                [39.31, 111.67],\n    \"Vermont\" :             [44.07, 72.67],\n    \"Virginia\" :            [37.52, 78.85],\n    \"Washington\" :          [47.38, 120.45],\n    \"West Virginia\" :       [38.64, 80.62],\n    \"Wisconsin\" :           [44.62, 89.99],\n    \"Wyoming\" :             [43.00, 107.55]\n};\n\nexport default GeoCenter;","import './App.css';\nimport React,{useState, useEffect} from 'react';\nimport { Map, GoogleApiWrapper, Circle, Marker } from 'google-maps-react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { makeStyles } from '@material-ui/core/styles';\nimport actualdata from './data/actual_data.json'\nimport predictdata from './data/predict_data.json'\nimport Slider from '@material-ui/core/Slider';\nimport GeoCenter from './const'\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    position: 'relative',\n    overflow: 'auto',\n    height: \"60vh\",\n    backgroundColor : '#202020'\n  },\n  slider:{\n    marginLeft:'2%',\n  }\n}));\n\n/**\n * Returns the radious and the hue of based on \n * the prediction percentage of the state.\n * @param {Float} p the prediction percentage value between 0 and 1\n * @returns {Array} the radious and hue of the circle\n */\nfunction pred_rad_and_hue(p) {\n  const r = (2 * p + 2) * 10000;\n  let g_comp = Math.abs(Math.floor(255 * (1 - p))).toString(16);\n  let r_comp = Math.abs(Math.floor(255 * p)).toString(16);\n  const b_comp = \"00\";\n  if(g_comp.length ===3)\n  {\n    g_comp = g_comp.slice(1)\n  }\n  if(g_comp.length === 1)\n  {\n    g_comp = '0' + g_comp;\n  }\n  if(r_comp.length === 1)\n  {\n    r_comp = '0' + r_comp;\n  }\n\n  const h = r_comp + g_comp + b_comp;\n\n  return { \"rad\" : r, \"hue\" : h}\n}\n\nfunction convertToKey(input) \n{\n  let [month, date, year] = new Date(input).toLocaleDateString(\"en-US\").split(\"/\")\n  if(date.length === 1)\n  {\n    date = '0' + date\n  }\n  if(month.length === 1)\n  {\n    month = '0' + month\n  }\n  return year + \"-\" + month + \"-\" + date\n}\n\nfunction nextDay(input, value)\n{\n  let temp = new Date(input)\n  temp.setDate(temp.getDate()+value)\n  let [month, date, year] =  temp.toLocaleDateString(\"en-US\").split(\"/\")\n  if(date.length === 1)\n  {\n    date = '0' + date\n  }\n  if(month.length === 1)\n  {\n    month = '0' + month\n  }\n  return year + \"-\" + month + \"-\" + date\n}\n\nfunction App({google}) {\n  const statVisible = useState({});\n  const [mapArray, setMapArray]= useState([])\n  const [listArray, setListArray] = useState([])\n  const actualkeys = Object.keys(actualdata)\n  const predictkeys = Object.keys(predictdata)\n  const classes = useStyles();\n  const actualStartDate = convertToKey(actualkeys[0])\n  const actualEndDate = convertToKey(actualkeys[actualkeys.length - 1])\n  const predictStartDate = convertToKey(predictkeys[0])\n  const predictEndDate = convertToKey(actualkeys[predictkeys.length - 1])\n   useEffect(() => {  document.body.style.backgroundColor = '#252627'}, [])\n\n   const handleChange = (event, newValue)=>{\n      const actualObj = actualdata[nextDay(actualStartDate, newValue)]\n      const predictObj = predictdata[nextDay(predictStartDate, newValue)]\n      console.log(actualObj, predictObj)\n      const circleResult = Object.keys(actualObj).map((value, index, array)=>{\n        const predictionError = (Math.abs((actualObj[value]+1) - (predictObj[value]+1)))/(actualObj[value]+1)\n        const radHue = pred_rad_and_hue(predictionError)\n        const [lati, longi] = GeoCenter[value]\n        return (<Circle radius ={radHue['rad']} \n          center={{lat:lati, lng:(-1*longi)}}\n          strokeColor='transparent'\n          strokeOpacity={0}\n          strokeWeight={5}\n          onClick={() => console.log('click')}\n          onMouseover={(props) => console.log(props.center)}\n          fillColor={'#'+radHue['hue']}\n          fillOpacity={0.6}/>)\n      })\n      const listResult = Object.keys(actualObj).map((value, index, array)=>{\n        const predictionError = (Math.abs(actualObj[value]+1 - (predictObj[value]+1)))/(actualObj[value]+1)\n        const radHue = pred_rad_and_hue(predictionError)\n        return {\"state\":value, \"prediction\": predictObj[value], \"actual\" : actualObj[value], \"rad\":radHue['rad'], \"hue\":radHue['hue']}\n      })\n      setMapArray(circleResult)\n      setListArray(listResult)\n   }\n  return (\n    <div className=\"App\"> \n      <div id=\"header\">\n        <h4>Number of Hate Crimes againt Racial Minorities in U.S. by States</h4>\n        <p id=\"description\">\n          Hackathon\n        </p>\n      </div>\n      <div id=\"app-container\">\n           <div id=\"map\">\n              <Map \n                google = {google}\n                zoom = {5}\n                containerStyle = {{left: '2%', right:0, top: '27%', position: 'absolute', width:'70%', height : '72%'}}\n                initialCenter={\n                  {\n                    lat:39.8097343, \n                    lng: -98.5556199\n                  }\n                }>\n                  {mapArray}\n              </Map>\n              <Slider\n                className = {classes.slider}\n                defaultValue={(actualkeys.length - 1) * 7}\n                valueLabelFormat = {value => nextDay(actualStartDate , value)}\n                aria-labelledby=\"discrete-slider\"\n                valueLabelDisplay=\"auto\"\n                step={7}\n                marks\n                onChange = {handleChange}\n                min={0}\n                max={(actualkeys.length - 1) * 7}\n              />\n            </div>\n            <div id=\"space\"></div>\n            <div id=\"list\">\n              <h4 style={{marginBottom: '1rem', fontSize: '30px'}}>Prediction vs History</h4>\n              <List  className = {classes.root}>\n                {listArray.map(({state, prediction, actual, rad , hue})=>(\n                  <ListItem key ={state}>\n                    <ListItemText primary={state + \": \" + prediction + \" vs \" + actual }/>\n                  </ListItem>\n                ))}\n              </List>\n            </div>\n            \n      </div>\n    </div>\n  );\n}\n\n// export default App;\nexport default GoogleApiWrapper({\n  apiKey:'AIzaSyDanli18HUvTuLM8XdREveskQMPF5EI3ng'\n})(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}